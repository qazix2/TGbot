import telebot
import random
import requests
from datetime import datetime, timedelta
import sqlite3

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7235619947:AAGNvj_LTl1B9W3IdRpmvX-JEtBKUIk9iDk'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('soberup.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY, 
                    username TEXT, 
                    score REAL, 
                    last_use DATETIME,
                    group_id INTEGER,
                    pulls REAL DEFAULT 0)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS groups (
                    group_id INTEGER PRIMARY KEY, 
                    group_name TEXT, 
                    total_score REAL)''')

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—É—Ä—Å–∞
exchange_rate = None
last_update = None

def update_exchange_rate():
    global exchange_rate, last_update
    if last_update is None or (datetime.now() - last_update).total_seconds() > 300:  # 5 –º–∏–Ω—É—Ç
        response = requests.get("https://api.exchangerate-api.com/v4/latest/USD")  # –ü—Ä–∏–º–µ—Ä API
        data = response.json()
        exchange_rate = data['rates']['RUB']
        last_update = datetime.now()

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –æ—á–∫–∏ –æ—Ç 0.3 –¥–æ 3.0 –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['soberup'])
def sober_up(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    now = datetime.now()
    group_id = message.chat.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞ –∫–∞–∫ ID –≥—Ä—É–ø–ø—ã

    cursor.execute('SELECT score, last_use FROM users WHERE user_id = ?',
                   (user_id, ))
    result = cursor.fetchone()

    if result is None:
        score = random.uniform(0.3, 3.0)
        cursor.execute(
            'INSERT INTO users (user_id, username, score, last_use, group_id) VALUES (?, ?, ?, ?, ?)',
            (user_id, username, score, now, group_id))
        conn.commit()
        bot.reply_to(
            message,
            f"{username}, –≤—ã –æ—Ç—Ä–µ–∑–≤–µ–ª–∏ –Ω–∞ {round(score, 2)} –ø—Ä–æ–º–∏–ª–∏!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        cursor.execute('SELECT total_score FROM groups WHERE group_id = ?',
                       (group_id, ))
        group_result = cursor.fetchone()
        if group_result is None:
            cursor.execute(
                'INSERT INTO groups (group_id, group_name, total_score) VALUES (?, ?, ?)',
                (group_id, message.chat.title, score))
        else:
            cursor.execute(
                'UPDATE groups SET total_score = total_score + ? WHERE group_id = ?',
                (score, group_id))
        conn.commit()
    else:
        last_use, score = result[1], result[0]
        if last_use is not None and now - datetime.strptime(
                last_use, '%Y-%m-%d %H:%M:%S.%f') < timedelta(hours=1):
            remaining_time = timedelta(hours=1) - (
                now - datetime.strptime(last_use, '%Y-%m-%d %H:%M:%S.%f'))
            bot.reply_to(
                message,
                f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {str(remaining_time).split('.')[0]} –¥–æ –ø–æ–∫—É–ø–∫–∏ –±–æ—Ä–∂–æ–º–∏."
            )
        else:
            new_score = random.uniform(0.3, 3.0)
            cursor.execute(
                'UPDATE users SET score = score + ?, last_use = ? WHERE user_id = ?',
                (new_score, now, user_id))
            conn.commit()
            bot.reply_to(
                message,
                f"{username}, –≤—ã –æ—Ç—Ä–µ–∑–≤–µ–ª–∏ –Ω–∞ {round(new_score, 2)} –ø—Ä–æ–º–∏–ª–∏! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å - {round(score + new_score, 2)} –ø—Ä–æ–º–∏–ª—å."
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            cursor.execute(
                'UPDATE groups SET total_score = total_score + ? WHERE group_id = ?',
                (new_score, group_id))
            conn.commit()

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
@bot.message_handler(commands=['top'])
def show_top(message):
    cursor.execute(
        'SELECT username, score FROM users ORDER BY score DESC LIMIT 10')
    top_users = cursor.fetchall()

    if top_users:
        response = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
        for i, (username, score) in enumerate(top_users, start=1):
            response += f"{i}. {username} ‚Äî -{round(score, 2)} –ø—Ä–æ–º–∏–ª—å\n"
    else:
        response = "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç."

    bot.reply_to(message, response)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –≥—Ä—É–ø–ø –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
@bot.message_handler(commands=['top_groups'])
def show_top_groups(message):
    cursor.execute(
        'SELECT group_name, total_score FROM groups ORDER BY total_score DESC LIMIT 10'
    )
    top_groups = cursor.fetchall()

    if top_groups:
        response = "üèÜ –¢–æ–ø –≥—Ä—É–ø–ø –ø–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n\n"
        for i, (group_name, total_score) in enumerate(top_groups, start=1):
            response += f"{i}. {group_name} ‚Äî -{round(total_score, 2)} –ø—Ä–æ–º–∏–ª—å\n"
    else:
        response = "–¢–æ–ø –≥—Ä—É–ø–ø –ø–æ–∫–∞ –ø—É—Å—Ç."

    bot.reply_to(message, response)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –≥—Ä—É–ø–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@bot.message_handler(commands=['top_groups_today'])
def show_top_groups_today(message):
    today_start = datetime.now().replace(hour=0,
                                         minute=0,
                                         second=0,
                                         microsecond=0)
    cursor.execute(
        '''SELECT g.group_name, SUM(u.score) 
                      FROM users u 
                      JOIN groups g ON u.group_id = g.group_id 
                      WHERE u.last_use >= ? 
                      GROUP BY g.group_id 
                      ORDER BY SUM(u.score) DESC LIMIT 10''', (today_start, ))
    top_groups_today = cursor.fetchall()

    if top_groups_today:
        response = "üèÜ –¢–æ–ø –≥—Ä—É–ø–ø –ø–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        for i, (group_name, total_score) in enumerate(top_groups_today,
                                                      start=1):
            response += f"{i}. {group_name} ‚Äî -{round(total_score, 2)} –ø—Ä–æ–º–∏–ª—å\n"
    else:
        response = "–¢–æ–ø –≥—Ä—É–ø–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –ø—É—Å—Ç."

    bot.reply_to(message, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é
@bot.message_handler(commands=['kurs'])
def show_kurs(message):
    update_exchange_rate()
    if exchange_rate:
        pull_to_promile = round(exchange_rate / 10, 2)  # –ü—Ä–∏–º–µ—Ä –¥–ª—è 1 –ø—É–ª–ª–∞
        bot.reply_to(message, f"1 –ø—É–ª–ª —Å—Ç–æ–∏—Ç {pull_to_promile:.2f} –ø—Ä–æ–º–∏–ª–∏.")
    else:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø—É–ª–ª–∞ –∫ –ø—Ä–æ–º–∏–ª–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É–ª–ª–æ–≤
@bot.message_handler(commands=['pulls'])
def show_pulls(message):
    user_id = message.from_user.id
    cursor.execute('SELECT pulls FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result is None:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–ª–ª–æ–≤.")
    else:
        pulls = result[0]
        bot.reply_to(message, f"–£ –≤–∞—Å {round(pulls, 2)} –ø—É–ª–ª–æ–≤ –Ω–∞ —Å—á–µ—Ç—É.")

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—É–ª–ª–æ–≤ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@bot.message_handler(commands=['transfer'])
def transfer_pulls(message):
    user_id = message.from_user.id
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        _, target_username, amount_str = message.text.split()
        amount = float(amount_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT pulls FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if result is None or result[0] < amount or result[0]  < 0 or amount < 0:
            bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É–ª–ª–æ–≤ –Ω–∞ —Å—á–µ—Ç–µ.")
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
        cursor.execute('SELECT user_id FROM users WHERE username = ?', (target_username,))
        target_result = cursor.fetchone()
        if target_result is None:
            bot.reply_to(message, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        target_user_id = target_result[0]

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        cursor.execute('UPDATE users SET pulls = pulls - ? WHERE user_id = ?', (amount, user_id))
        cursor.execute('UPDATE users SET pulls = pulls + ? WHERE user_id = ?', (amount, target_user_id))
        conn.commit()

        bot.reply_to(message, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {round(amount, 2)} –ø—É–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}.")

    except ValueError:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /transfer <username> <amount>")
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—É–ª–ª–æ–≤.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ –ø—Ä–æ–º–∏–ª–µ–π –Ω–∞ –ø—É–ª–ª—ã –ø–æ –∫—É—Ä—Å—É
@bot.message_handler(commands=['exchange'])
def exchange_promile_to_pulls(message):

    user_id = message.from_user.id
    update_exchange_rate()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT score, pulls FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result is None:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–º–∏–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return

    promile_score, current_pulls = result

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—É–ª–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –ø—Ä–æ–º–∏–ª–∏
    pull_to_promile = round(exchange_rate / 10, 2)  # –ü—Ä–∏–º–µ—Ä: 1 –ø—É–ª–ª –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–∏–ª–µ–π

    if promile_score < pull_to_promile:
        bot.reply_to(message, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–º–∏–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞. –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã {pull_to_promile:.2f} –ø—Ä–æ–º–∏–ª–µ–π.")
    else:
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–∏–ª–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É–ª–ª—ã
        new_pulls = promile_score // pull_to_promile
        new_score = promile_score % pull_to_promile

        cursor.execute('UPDATE users SET score = ?, pulls = pulls + ? WHERE user_id = ?',
                       (new_score, new_pulls, user_id))
        conn.commit()

        bot.reply_to(message, f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ {round(promile_score - new_score, 2)} –ø—Ä–æ–º–∏–ª–µ–π –Ω–∞ {int(new_pulls)} –ø—É–ª–ª–æ–≤. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {round(new_score, 2)} –ø—Ä–æ–º–∏–ª–µ–π –∏ {round(current_pulls + new_pulls, 2)} –ø—É–ª–ª–æ–≤.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–æ—â–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message, """–ö–æ–º–∞–Ω–¥—ã:
/top - —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤
/top_groups - —Ç–æ–ø 10 –≥—Ä—É–ø–ø
/top_groups_today - —Ç–æ–ø 10 –≥—Ä—É–ø–ø –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/soberup - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–∏–ª–∏
/kurs - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å
/pulls - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–ª–æ–≤
/transfer <username> <amount> - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—É–ª–ª—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/exchange - –æ–±–º–µ–Ω—è—Ç—å –ø—Ä–æ–º–∏–ª–∏ –Ω–∞ –ø—É–ª–ª—ã
/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.""")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)